# This is a basic workflow to help you get started with Actions

name: Lib-util-c CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
  # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 17 2022"
          }
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install cmake
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc valgrind cmake
          cmake --version
          gcc --version
        # cmd "${{ matrix.config.environment_script }}"

      - name: Configure
        shell: bash
        run: |
          mkdir build
          cmake -S . -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
      - name: Build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }}

  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #   - uses: actions/checkout@v2
  #     with:
  #       submodules: 'true'

  #   - name: install valgrind
  #     run: sudo apt-get install -y gcc valgrind cmake

  #   # Runs a single command using the runners shell
  #   - name: Run linux build script
  #     run: $GITHUB_WORKSPACE/scripts/build_coverage.sh

  # windows-build:
  #   # The type of runner
  #   runs-on: windows-2022

  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #     - name: Setup cmake
  #       uses: jwlawson/actions-setup-cmake@v1.8
  #       with:
  #         cmake-version: '3.16.x'

  #     - name: Checkout repo
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: 'true'

  #     # Run cmake build on windows
  #     - uses: ilammy/msvc-dev-cmd@v1
  #     - name: Running Cmake on windows
  #       run: mkdir cmake
  #     - name: Where are we
  #       run: pwd
  #     - name: Run CMake
  #       run: cmake -B cmake -Dlib_util_c_ut:BOOL=ON -A x64
  #     - name: Run Build
  #       #run: msbuild /m lib-util-c.sln /p:Configuration=Debug
  #       run: cmake --build build --target all --config Debug -- -j4

  #     # Runs a single command using the runners shell
  #     - name: Run tests on the windows build
  #       run: |
  #         ctest -C "debug" -V --output-on-failure
